// Copyright (c) 2024, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
import 'dart:convert';
import 'dart:io';

import 'package:args/args.dart';
import 'package:cli_config/cli_config.dart';
import 'package:pub_semver/pub_semver.dart';

import '../../native_assets_cli.dart';
import '../model/pipeline_config.dart';
import '../model/pipeline_step.dart';
import 'asset.dart';
import 'build_config.dart';
import 'resources.dart';

part '../model/link_config.dart';

/// The input to the linking script.
///
/// It consists of a subset of the fields from the [BuildConfig] already passed
/// to the build script, the [assets] from the build step, and the [resources]
/// generated during the kernel compilation.
abstract class LinkConfig {
  Uri get configFile;

  Uri get outputDirectory;

  String get outputName;

  String get packageName;

  Uri get packageRoot;

  /// The URI of the `link.dart` script.
  Uri get script;

  /// The list of assets to be linked. These are the assets generated by a
  /// `build.dart` script destined for this packages `link.dart`.
  List<Asset> get assets;

  /// A collection of methods annotated with `@ResourceIdentifier`, which are
  /// called in the tree-shaken Dart code. This information can be used to
  /// dispose unused [assets].
  List<Resource>? get resources;

  /// Generate the [LinkConfig] from the input arguments to the linking script.
  factory LinkConfig(List<String> arguments) =>
      LinkConfigImpl.fromArguments(arguments);
}

class Resource {
  final String name;
  final Object? metadata;

  Resource({required this.name, required this.metadata});
}
