// Copyright (c) 2024, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
import 'dart:convert';
import 'dart:io';

import 'package:args/args.dart';
import 'package:cli_config/cli_config.dart';
import 'package:pub_semver/pub_semver.dart';

import '../../native_assets_cli.dart';
import '../model/pipeline_step.dart';
import 'build_config.dart';
import 'build_output.dart';
import 'pipeline_config.dart';

part '../model/link_config.dart';

/// The input to the linking script.
///
/// It consists of a subset of the fields from the [BuildConfig] already passed
/// to the build script, the [assets] from the build step, and the
/// [resourceIdentifiers] generated during the kernel compilation.
abstract class LinkConfig extends PipelineConfig {
  /// Generate the [LinkConfig] from the input arguments to the linking script.
  static Future<LinkConfig> fromArguments(List<String> args) async {
    final argParser = ArgParser()..addOption('config');

    final results = argParser.parse(args);
    final linkConfigContents =
        File(results['config'] as String).readAsStringSync();
    final linkConfigJson =
        jsonDecode(linkConfigContents) as Map<String, dynamic>;

    return LinkConfigArgs.fromJson(linkConfigJson).toLinkConfig();
  }

  @override
  Uri get configFile;

  @override
  Uri get outDirectory;

  @override
  String get outputName;

  @override
  String get packageName;

  @override
  Uri get packageRoot;

  /// The URI of the `link.dart` script.
  @override
  Uri get script;

  /// The list of assets to be linked. These are the assets generated by a
  /// `build.dart` script destined for this packages `link.dart`.
  List<Asset> get assets;

  /// A collection of methods annotated with `@ResourceIdentifier`, which are
  /// called in the tree-shaken Dart code. This information can be used to
  /// dispose unused [assets].
  ResourceIdentifiers? get resourceIdentifiers;
}
